# description
Egison is a programming language that features extensible efficient non-linear pattern matching with backtracking for non-free data types.
We can directly represent pattern matching for a wide range of data types including lists, multisets, sets, trees, graphs, and mathematical expressions.

# docs
https://www.egison.org

# install
brew install egison

# ex
% egison -t sample/math/geometry/exterior-derivative.egi


# usage
The Egison Programming Language

Usage: egison [FILE [ARGS]] [-v|--version] [-e|--eval EXPR] [-c|--command EXPR]
              [-F|--field FIELD] [-L|--load-library FILE] [-l|--load-file FILE]
              [-s|--substitute EXPR] [-m|--map EXPR] [-f|--filter EXPR]
              [-T|--tsv] [--no-io] [--no-banner] [-t|--test]
              [-p|--prompt STRING]
              [-M|--math (asciimath|latex|mathematica|maxima)]
              [-S|--sexpr-syntax] [--no-normalize]

Available options:
  -h,--help                Show this help text
  -v,--version             Show version number
  -e,--eval EXPR           Evaluate the argument string
  -c,--command EXPR        Execute the argument string
  -F,--field FIELD         Field information
  -L,--load-library FILE   Load library
  -l,--load-file FILE      Load file
  -s,--substitute EXPR     Operate input in tsv format as infinite stream
  -m,--map EXPR            Operate input in tsv format line by line
  -f,--filter EXPR         Filter input in tsv format line by line
  -T,--tsv                 Output in tsv format
  --no-io                  Prohibit all io primitives
  --no-banner              Do not display banner
  -t,--test                Execute only test expressions
  -p,--prompt STRING       Set prompt string
  -M,--math (asciimath|latex|mathematica|maxima)
                           Output in AsciiMath, Latex, Mathematica, or Maxima
                           format
  -S,--sexpr-syntax        Use s-expression syntax
  --no-normalize           Turn off normalization of math expressions


# Riemann curvature
-- Parameters
def x := [| θ, φ |]

def X := [| r * sin θ * cos φ -- x
          , r * sin θ * sin φ -- y
          , r * cos θ         -- z
          |]

def e_i_j := ∂/∂ X_j x~i

-- Metric tensors
def g_i_j := generateTensor (\[x, y] -> V.* e_x_# e_y_#) [2, 2]
def g~i~j := M.inverse g_#_#

assertEqual "Metric tensor"
  g_#_#
  [| [| r^2, 0 |], [| 0, r^2 * (sin θ)^2 |] |]_#_#
assertEqual "Metric tensor"
  g~#~#
  [| [| 1 / r^2, 0 |], [| 0, 1 / (r^2 * (sin θ)^2) |] |]~#~#

-- Christoffel symbols
def Γ_i_j_k := (1 / 2) * (∂/∂ g_i_k x~j + ∂/∂ g_i_j x~k - ∂/∂ g_j_k x~i)

assertEqual "Christoffel symbols of the first kind"
  Γ_1_#_#
  [| [| 0, 0 |], [| 0, -1 * r^2 * (sin θ) * (cos θ) |] |]_#_#
assertEqual "Christoffel symbols of the first kind"
  Γ_2_#_#
  [| [| 0, r^2 * (sin θ) * (cos θ) |], [| r^2 * (sin θ) * (cos θ), 0 |] |]_#_#

def Γ~i_j_k := withSymbols [m]
  g~i~m . Γ_m_j_k

assertEqual "Christoffel symbols of the second kind"
  Γ~1_#_#
  [| [| 0, 0 |], [| 0, -1 * sin θ * cos θ |] |]_#_#
assertEqual "Christoffel symbols of the second kind"
  Γ~2_#_#
  [| [| 0, (cos θ) / (sin θ) |], [| (cos θ) / (sin θ), 0 |] |]_#_#

-- Riemann curvature
def R~i_j_k_l := withSymbols [m]
  ∂/∂ Γ~i_j_l x~k - ∂/∂ Γ~i_j_k x~l + Γ~m_j_l . Γ~i_m_k - Γ~m_j_k . Γ~i_m_l

assertEqual "riemann curvature"
  R~#_#_1_1
  [| [| 0, 0 |], [| 0, 0 |] |]~#_#
assertEqual "riemann curvature"
  R~#_#_1_2
  [| [| 0, (sin θ)^2 |], [| -1, 0 |] |]~#_#
assertEqual "riemann curvature"
  R~#_#_2_1
  [| [| 0, -1 * (sin θ)^2 |], [| 1, 0 |] |]~#_#
assertEqual "riemann curvature"
  R~#_#_2_2
  [| [| 0, 0 |], [| 0, 0 |] |]~#_#

-- Ricci curvature
def Ric_i_j := withSymbols [m]
  sum (contract R~m_i_m_j)

-- Scalar curvature
def scalarCurvature := withSymbols [i, j]
  g~i~j . Ric_i_j

assertEqual "scalar curvature"
  scalarCurvature
  (2 / r^2)
