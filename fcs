# description

# doc

# install
https://github.com/ncbi/fcs-gx
Building requirements
GCC >= 7.3
cmake >= 3.1
python >= 3.8
From the repository root, run make.
After a successful build, run the following for the help menu. ./dist/run_gx --help

# usage
mkdir /dev/shm/gxdb # Create a folder in your shared memory space. This is where you will save the GX database.
./scripts/sync_files.py get --mft=https://ftp.ncbi.nlm.nih.gov/genomes/TOOLS/FCS/database/test-only/test-only.manifest  --dir=/dev/shm/gxdb #Download test db
curl -LO https://github.com/ncbi/fcs/raw/main/examples/fcsgx_test.fa.gz  #Retrieve test fasta file.
mkdir gx_out  #Make a directory for output files.
./dist/run_gx --fasta=fcsgx_test.fa.gz --tax-id=6973 --gx-db=/dev/shm/gxdb/test-only --out-dir=./gx_out/
fcsgx_test.fa.6973.fcs_gx_report.txt #  successful run should produce these two files inside of gx_out directory:
fcsgx_test.fa.6973.taxonomy.rpt

# usage -- For normal runs, use the complete all database:
##Download the database to the local disk, and then copy it to a RAM-backed tmpfs or ramfs location (we will use /dev/shm/gxdb in examples below).
./scripts/sync_files.py sync-in-place --mft=https://ftp.ncbi.nlm.nih.gov/genomes/TOOLS/FCS/database/latest/all.manifest --dir=/path/to/local/disk/gxdb
./scripts/sync_files.py sync-in-place --mft=/path/to/local/disk/gxdb/all.manifest --dir=/dev/shm/gxdb
##Alternatively, you may skip the disk and download to tmpfs directly.
./scripts/sync_files.py  sync-in-place --mft=https://ftp.ncbi.nlm.nih.gov/genomes/TOOLS/FCS/database/latest/all.manifest  --dir=/dev/shm/gxdb
## Alternatively, you can vmtouch downloaded database on local disk and use it directly instead of tmpfs.
vmtouch -m1000G -v -t /path/to/local/disk/gxdb
vmtouch -m1000G -v    /path/to/local/disk/gxdb  # execute again to verify that the database files are in RAM and have not been swapped-out.
## Run GX.
 ./dist/run_gx --fasta fcsgx_test.fa.gz --tax-id 6973 --gx-db /dev/shm/gxdb/all --out-dir ./gx_out/
## Environment Variables
You can run FCS-GX with environment variables to control the number of CPUs used (GX_NUM_CORES) or to exclude alignments to particular tax-ids (GX_ALIGN_EXCLUDE_TAXA). Multiple tax-ids may be provided as a comma-separated list. Note this only works for bottom-level tax-ids explicitly in the database, e.g. setting GX_ALIGN_EXCLUDE_TAXA=33208 will not exclude all metazoan hits.
## For example, to run a genome with 8 CPUs and excluding alignments to Toxoplasma gondii, set the variables as follows prior to running GX:
export GX_NUM_CORES=8
export GX_ALIGN_EXCLUDE_TAXA=5811
Useful GX subcommands
## The sequences used to build the gx database are listed in the file all.seq_info.tsv.gz within the gxdb folder. From there, you can select the sequences of your choice, and then generate the fasta files using the gx get-fasta subcommand:
./dist/gx get-fasta --db /dev/shm/gxdb/all.gxi --input 3col.txt  --output out.txt
The input file, which is provided by the user, is a tab delimited, 3 column file in the following format, along with the header:

cat 3col.txt
##[["GX locs",1,1]]
NC_060925.1     .       .
To get the fasta for a specific set of coordinates, format your input file with the start and end coordinates in the 2nd and 3rd column, respectively:

##[["GX locs",1,1]]
NC_060925.1     1       200
Output files
Please see the GitHub documentation for more details on the output files.
