# description
All things gcc

# install
brew install gcc
brew install gcc@11.2.0
spack install gcc
asdf ...

# To compile a file:
gcc file.c

# To compile a file with a custom output:
gcc -o file file.c

# spack default compiler:
spack config add "packages:all:compiler:[gcc@8.3.0]"
# via config file
spack config --scope defaults edit packages
spack compilers
spack config get compilers
spack config --scope defaults edit config

# versions / homebrew
brew list --versions gcc
gcc 6.2.0
brew list --versions gcc48
gcc48 4.8.5

# Compile a file
gcc file.c

# missing include file after xcode 11.3  from /usr/include
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/
gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1
# maybe try
export CPATH=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
# or maybe
export CFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
export CCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
export CXXFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
export CPPFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk

# Compile a file with a custom output
gcc -o file file.c

# Debug symbols
gcc -g

# Debug with all symbols.
gcc -ggdb3

# Build for 64 bytes
gcc -m64

# Include the directory {/usr/include/myPersonnal/lib/} to the list of path for #include <....>
# With this option, no warning / error will be reported for the files in {/usr/include/myPersonnal/lib/}
gcc -isystem /usr/include/myPersonnal/lib/

# To build a GUI for windows (Mingw) (Will disable the term/console):
gcc -mwindows

#versions of gcc (>4.3) support  -frecord-gcc-switches which adds some compile symbols to the binary which we could search later if needed like so;
$ gcc -O2 -frecord-gcc-switches a.c
$ readelf -p .gcc.command.line a.out

# compile options (static )
-fcompile-time-switches -static -static-libgcc -static-libstdc++ -mtune=native

# profile guided optimization : 5-30%
instrument programs to produce profiling information, then use that information to rebuild the executable with better optimizations.
flags: -fprofile-generate, and in a subsequent invocation, -fprofile-use
##
$ gcc -fprofile-generate=path-for-profiling-files source.c  -o program  #Build the program instrumented with the profiling support:
$ ./program #Run . It will produce profile information in files that the final step consumes:
$ gcc -fprofile-use=path-of-profiling-files source.c -o faster_program #Use the profiling information files produced in step 2:
You need to use these flags both in the linking step and in steps that only create object files.


# gcc PGO (see also LTO
-fprofile-generate=path-for-profiling-files: instrument binary with profiling code, run binary, log events that could improve performance if
usage pattern known at compile time. 	  After program exits, dump data into *.gcda . Rebuild with
-fprofile-use  : take *.gcda data into account when optimizing, usually increasing the performance significantly.

# gcc -m <archtuning> options all have a corresponding -mno-* option
gcc -mcpu=native -march=native -Q --help=target

# gcc spec / configuration
echo | cpp -dM
function myarch() { gcc -mcpu=native -march=native -Q --help=target ; } # arch
function mytune() { gcc -### -E - -march=native 2>&1 | sed -r '/cc1/!d;s/(")|(^.* - )|( -mno-[^\ ]+)//g' ; } # tune
function mycpu() { sysctl -n machdep.cpu.brand_string; } # cpu
function mymac() { system_profiler SPHardwareDataType; }  # mac
gcc -x c++ -E -Wp,-v -
gcc -print-search-dirs
ld -v

# simd / openmp / gcc
https://stackoverflow.com/questions/61154047/pragma-omp-for-simd-does-not-generate-vector-instructions-in-gcc

# osx 10.15 lacks proper Availability.h and macros (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90835)j
Errors relating to
__OSX_AVAILABLE_STARTING(__MAC_10_6, ...
	|^~~~~~~~~~~~~~~~~~~~~~~~
	But note that <sys/cdefs.h> also already does the following:
	/*
	* Compatibility with compilers and environments that don't support compiler
	* feature checking function-like macros.
	*/
#ifndef __has_builtin
#define __has_builtin(x) 0
#endif
#ifndef __has_include
#define __has_include(x) 0
#endif
#ifndef __has_feature
#define __has_feature(x) 0
#endif
#ifndef __has_attribute
#define __has_attribute(x) 0
#endif
#ifndef __has_extension
#define __has_extension(x) 0
#endif

# build on MacOS 10.14.6 and 10.15.3
3/2020 - gcc 8.3.0 (build only) and master(full bootstrap and test) on macOS 10.14.6 and 10.15.3, each with Xcode 11.3.1.
Both worked *provided the build and target compilers were configured with the
approriate --with-sysroot to account for the lack of /usr/include and startup
objects in /usr/lib*.

# brew dylib check
brew dylibcheck --linkage --compact $(brew --cellar gcc) | fgrep stdc++

# ld: symbol(s) not found for architecture x86_64
check for global defs of CFLAGS, LDFLAGS, CC, CXX
# generally seems to be a problem with llvm / clang, so
CC=gcc make  # careful though since /usr/bin/gcc is ALSO clang!!

# linuxbrew gcc bootstrapping
https://www.tundraware.com/TechnicalNotes/Divorce-Your-Linux-Admin/

# gcc / openmp on osx
make sure gcc / g++ is homebrew's version e.g. g++-8 in makefile
# or clang
brew install libomp
clang++ -Xpreprocessor -fopenmp main.cpp -o main -lomp

# boost
module switch PrgEnv-pgi PrgEnv-gnu
# add to ~/user-config.jam
using mpi : <find-shared-library>mpich ;
using gcc : : <compileflags>-I/opt/mpt/default/xt/mpich2-gnu/include <linkflags>-L/opt/mpt/default/xt/mpich2-gnu/lib ;
#
# bjam
./bjam --prefix=~copeland/local
./bjam install --prefix=~copeland/local

# architecture symbols
echo | cpp -dM
https://wiki.debian.org/ArchitectureSpecificsMemo

# feature queries
GCC  : __bulitin_cpu_supports
ICC  : _may_i_use_cpu_feature (_FEATURE_AVX)) OR __builtin_cpu_supports
Clang: __builtin_cpu_supports.

# Download:
git clone git://gcc.gnu.org/git/gcc.git

#Configure:
mkdir objdir
cd objdir
srcdir/configure [options] [target]

# compile gcc
Prerequisites
ISO C++11 compiler - Necessary to bootstrap GCC.
C standard library and headers - build GCC, the C std lib + headers must be present for all target variants for which target libraries will be built
	--disable-multilib <=  ‘fatal error: gnu/stubs-32.h: No such file’
bash - A “working” POSIX compatible shell, or GNU bash. zsh is not a fully compliant POSIX shell and will not work when configuring GCC.
POSIX/SVR4 awk - for creating some generated source files . If in doubt, use a recent GNU awk version, as some of the older ones are broken. GNU awk version 3.1.5 is known to work.
binutils - Necessary in some circumstances, optional in others. See the host/target specific instructions for your platform for the exact requirements.
gzip version 1.2.4 (or later) or bzip2 version 1.0.2 (or later) - Necessary to uncompress GCC tar files when source code is obtained via HTTPS mirror sites.
make version 3.80 (or later) -You must have GNU make installed to build GCC.
tar version 1.14 (or later) -Necessary (only on some platforms) to untar the source code. Many systems’ tar programs will also work, only try GNU tar if you have problems.
Perl version between 5.6.1 to 5.6.24 - when targeting Darwin, building ‘libstdc++’, and not using --disable-symvers. Necessary when targeting Solaris 2 with Solaris ld and not using --disable-symvers.
GMP Multiple Precision Library version >= 4.3.2 - build GCC. If a GMP source distribution is found in a subdirectory of your GCC sources named gmp, it will be built together with GCC.
MPFR Library version 3.1.0 (or later) - build GCC.  downloade https://www.mpfr.org. If an MPFR source distribution is found in a subdirectory of your GCC sources named mpfr, it will be built together with GCC. Alternatively, if MPFR is already installed but it is not in your default library search path, the --with-mpfr configure option should be used. See also --with-mpfr-lib and --with-mpfr-include. The in-tree build is only supported with the MPFR version that download_prerequisites installs.
MPC Library version 1.0.1 (or later) - Necessary to build GCC. It can be downloaded from https://www.multiprecision.org/mpc/. If an MPC source distribution is found in a subdirectory of your GCC sources named mpc, it will be built together with GCC. Alternatively, if MPC is already installed but it is not in your default library search path, the --with-mpc configure option should be used. See also --with-mpc-lib and --with-mpc-include. The in-tree build is only supported with the MPC version that download_prerequisites installs.
isl Library version 0.15 or later. -Necessary to build GCC with the Graphite loop optimizations. It can be downloaded from https://gcc.gnu.org/pub/gcc/infrastructure/. If an isl source distribution is found in a subdirectory of your GCC sources named isl, it will be built together with GCC. Alternatively, the --with-isl configure option should be used if isl is not installed in your default library search path.
zstd Library. - Necessary to build GCC with zstd compression used for LTO bytecode. The library is searched in your default library patch search. Alternatively, the --with-zstd configure option should be used.

# Error:  'ld: library not found for -lSystem'
# Fix:
a) xcode-select --install  #   Install the Xcode command-line utilities:   sudo xcodebuild -license # accept license if required
b) export LDFLAGS="-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib" #"-Wl,--rpath ...bison..."
# linker flags verbose
-ldflags="-linkmode=external -v"

# memory leaks
-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fno-sanitize=null -fno-sanitize=alignment
$ export ASAN_OPTIONS=abort_on_error=1:fast_unwind_on_malloc=0:detect_leaks=0 UBSAN_OPTIONS=print_stacktrace=1
Clang option to catch uninitialized memory reads: -fsanitize=memory. That option cannot be combined with -fsanitize=address.

# santize
DEBUG=-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fno-sanitize=null -fno-sanitize=alignment  -fno-omit-frame-pointer
CFLAGS=-Wall -std=c99 -g $(DEBUG) $(ASAN_OPTIONS)
CFLAGS += -fsanitize-address-use-after-scope
// these affect runtime (are not compile time opts)
ASAN_OPTIONS=strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1

# omp
On macOS, install GCC compiler since Clang has issues with OpenMP library:

# Error: error: 'uint64_t' has not been declared
# Fix: #include <cstdint>

# dialects -std
# see https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html
Determine the language standard. See Language Standards Supported by GCC, for details of these standard versions. This option is currently only supported when compiling C or C++.

The compiler can accept several base standards, such as ‘c90’ or ‘c++98’, and GNU dialects of those standards, such as ‘gnu90’ or ‘gnu++98’. When a base standard is specified, the compiler accepts all programs following that standard plus those using GNU extensions that do not contradict it. For example, -std=c90 turns off certain features of GCC that are incompatible with ISO C90, such as the asm and typeof keywords, but not other GNU extensions that do not have a meaning in ISO C90, such as omitting the middle term of a ?: expression. On the other hand, when a GNU dialect of a standard is specified, all features supported by the compiler are enabled, even when those features change the meaning of the base standard. As a result, some strict-conforming programs may be rejected. The particular standard is used by -Wpedantic to identify which features are GNU extensions given that version of the standard. For example -std=gnu90 -Wpedantic warns about C++ style ‘//’ comments, while -std=gnu99 -Wpedantic does not.

A value for this option must be provided; possible values are
c90|c89|iso9899:1990 - Support all ISO C90 programs (certain GNU extensions conflict with ISO C90 disabled). Same as -ansi for C code.
iso9899:199409  - ISO C90 as modified in amendment 1.
c99|c9x|iso9899:1999|iso9899:199x - |ISO C99 - substantially completely supported, modulo bugs and fp issues  See https://gcc.gnu.org/c99status.html for more information. The names ‘c9x’ and ‘iso9899:199x’ are deprecated.
c11|c1x|iso9899:2011 - ISO C11, 2011 revision of the ISO C standard. substantially completely supported
c17|c18|iso9899:2017|iso9899:2018  - ISO C17, the 2017 revision of the ISO C standard (published in 2018). C11 except for corrections of defects (all of which are also applied with -std=c11) and a new value of __STDC_VERSION__, and so is supported to the same extent as C11.
c23|c2x|iso9899:2024-ISO C23, the 2023 revision of the ISO C standard (expected to be published in 2024). support is experimental and incomplete. The name ‘c2x’ is deprecated.
gnu90|gnu89 - GNU dialect of ISO C90 (including some C99 features).
gnu99|gnu9x - GNU dialect of ISO C99. The name ‘gnu9x’ is deprecated.
gnu11|gnu1x - GNU dialect of ISO C11. The name ‘gnu1x’ is deprecated.
gnu17|gnu18 - GNU dialect of ISO C17. This is the default for C code.
gnu23|gnu2x - GNU dialect of ISO C23. The support for this version is experimental and incomplete. The name ‘gnu2x’ is deprecated.
gnu2y - The next version of the ISO C standard, still under development, plus GNU extensions. The support for this version is experimental and incomplete. The name ‘gnu2x’ is deprecated.
c++98|c++03 - The 1998 ISO C++ standard plus the 2003 technical corrigendum and some additional defect reports. Same as -ansi for C++ code.
gnu++98|gnu++03 - GNU dialect of -std=c++98.
c++11|c++0x - The 2011 ISO C++ standard plus amendments. The name ‘c++0x’ is deprecated.
gnu++11|gnu++0x - GNU dialect of -std=c++11. The name ‘gnu++0x’ is deprecated.
c++14|c++1y - The 2014 ISO C++ standard plus amendments. The name ‘c++1y’ is deprecated.
gnu++14|gnu++1y - GNU dialect of -std=c++14. The name ‘gnu++1y’ is deprecated.
c++17|c++1z - The 2017 ISO C++ standard plus amendments. The name ‘c++1z’ is deprecated.
gnu++17|gnu++1z - GNU dialect of -std=c++17. This is the default for C++ code. The name ‘gnu++1z’ is deprecated.
c++20|c++2a - The 2020 ISO C++ standard plus amendments. Support is experimental, and could change in incompatible ways in future releases. The name ‘c++2a’ is deprecated.
gnu++20|gnu++2a - GNU dialect of -std=c++20. Support is experimental, and could change in incompatible ways in future releases. The name ‘gnu++2a’ is deprecated.
c++2b|c++23 -The next revision of the ISO C++ standard, planned for 2023. Support is highly experimental, and will almost certainly change in incompatible ways in future releases.
gnu++2b|gnu++23 - GNU dialect of -std=c++2b. Support is highly experimental, and will almost certainly change in incompatible ways in future releases.
c++2c|c++26 - The next revision of the ISO C++ standard, planned for 2026. Support is highly experimental, and will almost certainly change in incompatible ways in future releases.
gnu++2c|gnu++26 - GNU dialect of -std=c++2c. Support is highly experimental, and will almost certainly change in incompatible ways in future releases.
