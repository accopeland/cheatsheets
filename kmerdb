# description
a fast and memory-efficient tool for large-scale k-mer analyses (indexing, querying, estimating evolutionary relationships, etc.).

# install
git clone https://github.com/refresh-bio/kmer-db
cd kmer-db && make


# usage
kmer-db <mode> [options] <positional arguments>

Kmer-db operates in one of the following modes:

build - building a database from samples,
all2all - counting common k-mers - all samples in the database,
new2all - counting common k-mers - set of new samples versus database,
one2all - counting common k-mers - single sample versus database,
distance - calculating similarities/distances,
minhash - storing minhashed k-mers,
Common options:

-t <threads> - number of threads (default: number of available cores),
The meaning of other options and positional arguments depends on the selected mode.

# build db -- building a k-mer db is first step for further analyses.
database (output) - file with generated k-mer database.
-k <kmer-length> - length of k-mers (default: 18); ignored when -from-kmers or -from-minhash switch is specified.
-f <fraction> - fraction of all k-mers to be accepted by the minhash filter during database construction (default: 1); ignored when -from-minhash switch is present.
-multisample-fasta - each sequence in a FASTA file is treated as a separate sample,
-extend - extend the existing database with new samples,
-t <threads> - number of threads (default: number of available cores).
Parameters:
sample_list (input) - file containing list of samples in the following format:
sample_file_1
sample_file_2
sample_file_3
...
The procedure accepts several input types:
- compressed or uncompressed genomes/reads: un/compressed FASTA files for each sample; tries also extensions: fna, fasta, gz, fna.gz, fasta.gz .
kmer-db build [-k <kmer-length>] [-f <fraction>] [-multisample-fasta] [-extend] [-t <threads>] <sample_list> <database>
- KMC-generated k-mers: KMC-generated k-mer files (.kmc_pre and .kmc_suf) are required.
kmer-db build -from-kmers [-f <fraction>] [-extend] [-t <threads>] <sample_list> <database>
- minhashed k-mers produced by minhash mode: -from-minhash , minhashed k-mer files (.minhash) must be generated by minhash command prior to the database construction.
kmer-db build -from-minhash [-extend] [-t <threads>] <sample_list> <database>

# minhash
Note, that minhashing may be also done during the database construction by specyfying -f option.

# examples
INPUT=./test/virus
OUTPUT=./output
mkdir $OUTPUT
#
# build a database from all 18-mers (default) contained in a set of sequences
./kmer-db build $INPUT/seqs.part1.list $OUTPUT/k18.db
#
# establish numbers of common k-mers between new sequences and the database
./kmer-db new2all $OUTPUT/k18.db $INPUT/seqs.part2.list $OUTPUT/n2a.csv
#
# calculate jaccard index from common k-mers
./kmer-db distance $OUTPUT/n2a.csv
#
# extend the database with new sequences
./kmer-db build -extend $INPUT/seqs.part2.list $OUTPUT/k18.db
#
# establish numbers of common k-mers between all sequences in the database
./kmer-db all2all $OUTPUT/k18.db $OUTPUT/a2a.csv
#
# build a database from 10% of 25-mers using 16 threads
./kmer-db build -k 25 -f 0.1 -t 16 $INPUT/seqs.part1.list $OUTPUT/k25.db
#
# establish number of common 25-mers between single sequence and the database
# (minhash filtering that retains 10% of MT159713 k-mers is done automatically prior to the comparison)
./kmer-db one2all $OUTPUT/k25.db $INPUT/data/MT159713.fasta $OUTPUT/MT159713.csv


