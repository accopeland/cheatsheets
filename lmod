# description
lua based module environment from TACC

# info
Documentation:    http://lmod.readthedocs.org
GitHub:           https://github.com/TACC/Lmod
SourceForge:      https://lmod.sf.net
TACC Homepage:    https://www.tacc.utexas.edu/research-development/tacc-projects/lmod

# install
https://sourceforge.net/projects/lmod/files/Lmod-8.4.tar.bz2/download

# install (needs lua)
brew install lmod

# config
ml --config

# spider cache
$ update_lmod_system_cache_files -d ~/moduleData/cacheDir -t ~/moduleData/system.txt $MODULEPATH

# cache
module --config | grep RC # find <foo>/lmodrc.lua
cp <foo>/lmodrc.lua ~/lmodrc.lua

# cmd
echo $LMOD_CMD
/usr/share/lmod/lmod/libexec/lmod

# debug
ml -T spider

# show module table
ml --mt

# Loading/Unloading sub-commands:
  load | add          module [...]  load module(s)
  try-load | try-add  module [...]  Add module(s), do not complain if not found
  del | unload        module [...]  Remove module(s), do not complain if not found
  swap | sw | switch  m1 m2         unload m1 and load m2
  purge                             unload all modules
  refresh                           reload aliases from current list of modules.
  update                            reload all currently loaded modules.
# docs: https://lmod.readthedocs.io/en/latest/045_transition.html

#Listing / Searching sub-commands:
  list                              List loaded modules
  list                s1 s2 ...     List loaded modules that match the attern
  avail | av                        List available modules
  avail | av          string        List available modules that contain "string".
  overview | ov                     List all available modules by short names with number of versions
  overview | ov       string        List available modules by short names with number of versions that contain "string"
  spider                            List all possible modules
  spider              module        List all possible version of that module file
  spider              string        List all module that contain the "string".
  spider              name/version  Detailed information about that version of the module.
  whatis              module        Print whatis information about module
  keyword | key       string        Search all name and whatis that contain
                                    "string".
#Searching with Lmod:
  All searching (spider, list, avail, keyword) support regular expressions:
  -r spider           '^p'          Finds all the modules that start with `p' or `P'
  -r spider           mpi           Finds all modules that have "mpi" in their name.
  -r spider           'mpi$         Finds all modules that end with "mpi" in their name.

# Handling a collection of modules:
  save | s                          Save the current list of modules to a user defined "default" collection.
  save | s            name          Save the current list of modules to "name" collection.
  reset                             The same as "restore system"
  restore | r                       Restore modules from the user's "default" or system default.
  restore | r         name          Restore modules from "name" collection.
  restore             system        Restore module state to system defaults.
  savelist                          List of saved collections.
  describe | mcc      name          Describe the contents of a module collection.
  disable             name          Disable (i.e. remove) a collection.
# usage
module use <foo>

# Miscellaneous sub-commands:
  is-loaded           modulefile    return a true status if module is loaded
  is-avail            modulefile    return a true status if module can be loaded
  show                modulefile    show the commands in the module file.
  use [-a]            path          Prepend or Append path to MODULEPATH.
  unuse               path          remove path from MODULEPATH.
  tablelist                         output list of active modules as a lua table.
# find
module spider <foo>

# Important Environment Variables:
  LMOD_COLORIZE                     If defined to be "YES" then Lmod prints properties and warning in color.
# config
homebrew: source or link to bash setup script /usr/local/opt/lmod/init/profile
_INIT_LMOD=1 # env vars

# init on mac
> lmod_init

# list
module list

# purge - clean env
 module purge

# default collections
~/.lmod.d/default
If not found then LMOD_SYSTEM_DEFAULT_MODULES as a list of module to load.
MODULEPATH

# Error: I created a module but “module avail” can’t find it
Fix: if the modulefile is in MODULEPATH then you cache is out-of-date.
$ module --ignore_cache avail

# Lmod (lua module)

# create module file
cd ~/modulefiles
$ mkdir git
$ cd git
$ cat > 2.6.2.lua
local home    = os.getenv("HOME")
local version = myModuleVersion()
local pkgName = myModuleName()
local pkg     = pathJoin(home,"pkg",pkgName,version,"bin")
prepend_path("PATH", pkg)

$ module use $HOME/modulefiles
$ module load git

# core compilers
core_compilers is not the top level of the module hierarchy, rather it is what compiler to leave out.
