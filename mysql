---
tags: [ database ]
---
# To connect to a database:
mysql -h <host> -u <username> -p

# Run query from command line
mysql --defaults-group-suffix=aws -e 'select 1 from dual;'

# To backup all databases:
mysqldump --all-databases --all-routines -u <username> -p > ~/dump.sql

# To restore all databases:
mysql -u <username> -p  < ~/fulldump.sql

# To create a database in utf8 charset:
CREATE DATABASE owa CHARACTER SET utf8 COLLATE utf8_general_ci;

# To add a user and give rights on the given database:
GRANT ALL PRIVILEGES ON database.* TO 'user'@'localhost'IDENTIFIED BY 'password' WITH GRANT OPTION;

# To list the privileges granted to the account that you are using to connect to the server. Any of the 3 statements will work. :
SHOW GRANTS FOR CURRENT_USER();
SHOW GRANTS;
SHOW GRANTS FOR CURRENT_USER;

# Basic SELECT Statement:
SELECT * FROM tbl_name;

# Basic INSERT Statement:
INSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);

# Basic UPDATE Statement:
UPDATE tbl_name SET col1 = "example";

# Basic DELETE Statement:
DELETE FROM tbl_name WHERE user = 'jcole';

# To check stored procedure:
SHOW PROCEDURE STATUS;

# To check stored function:
SHOW FUNCTION STATUS;

# datetime datediff
SELECT DATEDIFF("2017-06-25", "2017-06-15");

# datetime subtime()
SELECT SUBTIME("10:24:21", "-3:2:5"); #Add 3 hours, 2 minutes, and 5 seconds, and return time:

# datetime timestampdiff
sec_to_time(timestampdiff(second, rtl.cluster_dt_start, rtl.cluster_dt_end)) as rtime,

# datetime extract
extract(week from dt_created)

# datetime now()
datediff(now(), rpq.dt_created)

# datetime day(), month() etc
day
month
quarter
time
week
weekday
dayofmonth
dayofweek
dayofyear
...

# extract
extract( part from datetime)
where part is one of:
MICROSECOND
SECOND
MINUTE
HOUR
DAY
WEEK
MONTH
QUARTER
YEAR
SECOND_MICROSECOND
MINUTE_MICROSECOND
MINUTE_SECOND
HOUR_MICROSECOND
HOUR_SECOND
HOUR_MINUTE
DAY_MICROSECOND
DAY_SECOND
DAY_MINUTE
DAY_HOUR
YEAR_MONTH

# date_format
SELECT DATE_FORMAT("2017-06-15", "%Y");

# date ordering
sam_ship_approve_date < sam_receive_date < sam_qc_date < sow_item_qc_date < alq_create_date < seg_create_date
  < lib_create_date < sdm_seq_start_date < sdm_seq_complete_date < rqc_seq_unit_qc_date
(datediff(sam_receive_date, sam_ship_approve_date)) as app2rcv,
(datediff(sam_receive_date, sam_qc_date)) as rcvs2qc,
(datediff(sam_qc_date, alq_create_date)) as sqc2alq,
(datediff(alq_create_date,lib_create_date)) as alq2lc,
(datediff(lib_create_date,pr_create_date)) as lc2pr,
(datediff(pr_create_date,pool_create_date)) as pr2pool,
(datediff(pool_create_date,sdm_seq_start_date)) as poo2seq,
(datediff(sdm_seq_start_date,sdm_seq_complete_date)) as seq,
(datediff(sdm_seq_complete_date,rqc_seq_unit_qc_date)) as seq2suqc,
(datediff(rqc_seq_unit_qc_date,sow_item_qc_date)) as suqc2sow,
(datediff(sow_item_qc_date,sp_orig_complete_date)) as suqc2spc

sow_item_qc_date - before segment creation. After sample qc. If it passes SOW gets scheduled for an aliquot.
rqc_status_date - date that the seq qc analysis is submitted with either “usable” or “bad”.
sdm_seq_start_date - sdm_seq_complete dates
rqc_seq_unit_date
This order works when there is a single pass from start to finish. Rework will mess this order up.

# histogram
select floor(datediff(sam_receive_date, sam_ship_approve_date)/30)*30 as app2rcv, count(*)

# cumulative with correlated subquery
select date, (select sum(u.value) from t as u  where u.date<=t.date) from t

# describe
desc some_table
SHOW COLUMNS FROM table_name;
EXPLAIN table_name;

# csv
TABLE tableName
INTO OUTFILE 'path/outputFile.csv'
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
ESCAPED BY ''
LINES TERMINATED BY 'n';

# .my.cnf
# see https://dev.mysql.com/doc/refman/8.0/en/option-files.html
mysql --defaults-group-suffix=scidbro ...

# forward
* mysql port forward
  # https://myopswork.com/transparent-ssh-tunnel-through-a-bastion-host-d1d864ddb9ae
  ssh -i mymaster.pem  ec2-user@10.0.2.56 -o "proxycommand ssh -W %h:%p -i mymaster.pem ec2-user@mybastion.elb.amazonaws.com"
  see ~/.ssh/config ProxyCommand LocalForward
  see ~/.aliases rqct()

# transpose - column output
\G

# pager
mysql> pager less -S

# sql terminators
?         (\?) Synonym for `help'.
clear     (\c) Clear the current input statement.
connect   (\r) Reconnect to the server. Optional arguments are db and host.
delimiter (\d) Set statement delimiter.
edit      (\e) Edit command with $EDITOR.
ego       (\G) Send command to mysql server, display result vertically.
exit      (\q) Exit mysql. Same as quit.
go        (\g) Send command to mysql server.
help      (\h) Display this help.
nopager   (\n) Disable pager, print to stdout.
notee     (\t) Don't write into outfile.
pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.
print     (\p) Print current command.
prompt    (\R) Change your mysql prompt.
quit      (\q) Quit mysql.
rehash    (\#) Rebuild completion hash.
source    (\.) Execute an SQL script file. Takes a file name as an argument.
status    (\s) Get status information from the server.
system    (\!) Execute a system shell command.
tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.
use       (\u) Use another database. Takes database name as argument.
charset   (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.
warnings  (\W) Show warnings after every statement.
nowarning (\w) Don't show warnings after every statement.


