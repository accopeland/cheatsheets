# description
nu / nushell : rust data oriented shell

# docs
https://www.nushell.sh/commands/docs/group-by.html#frontmatter-title-for-filters

# language -- gotchas
https://www.nushell.sh/book/thinking_in_nu.html#think-of-nushell-as-a-compiled-language

# build
git clone https://github.com/nushell/nushell/archive/refs/tags/0.88.1.tar.gz
spack create -t cargo https://github.com/nushell/nushell/archive/refs/tags/0.88.1.tar.gz

# install
cargo install nu
brew install nushell

# update
rustup update # maybe
carog install nu

# config
config nu

# startup
nu -c
Always reads the default_env.nu file
Does not read any config.nu

nu -l -c
Always reads default_env.nu
Always reads default_config.nu

nu -l -c --config-file foo_config.nu
Always reads default_env.nu
Always reads specified file foo_config.nu

nu -l -c --config foo_config.nu --env-config foo_env.nu
Always reads specified file foo_env.nu
Always reads specified file foo_config.nu

# plugin
> let plugin = ((which nu).path.0 | path dirname | path join 'nu_plugin_query'); nu -c $'register ($plugin); version'

# script archive
https://github.com/nushell/nu_scripts/blob/main/modules/formats/from-cpuinfo.nu

# scripts
/Users/copeland/Library/Application Support/nushell/scripts

# modules location
see ~/.config/nushell
$env.NU_LIB_DIRS :  /Users/copeland/Library/Application Support/nushell/scripts

# toolbox
/Users/copeland/Library/Application Support/nushell/scripts/toolbox.nu

# dataframe
need to be compiled in
check with ...
cargo build --feature ...
register plugin ...

# dataframe
dfr open file.csv | ... # also timeit { dfr open foo.csv }
let df = ( open initial.bbnet | lines | split column ' ' | where column1 == C225 | dfr into-df )
dfr ls
$df | dfr dtypes
let ans = ( $df | group-by year | tarnspose header rows | upsert rows { get rows | math sum } | flatten)
$ans
$df | dfr select col1 col2 ...

# histogram
histogram {flags} (column-name) (frequency-column-name)
[1 2 3 1 1 1 2 2 1 1] | histogram --percentage-type relative

# select
ls | select name
ls | select 1

# get -- extracts data out of the table and does not try to preserve its original form
ls | get name
ls | get size.1

# lines
open foo.txt | lines

# explore
open foo | explore -i

# plot

# bits
 14 | into bits                                                                                                                      06/06/2024 07:54:04 PM PM
00001110
 8| into bits
00001000
 1| into bits
00000001
 2| into bits
00000010
 3| into bits
00000011
 4| into bits
00000100
 11 | into bits                                                                                                                      06/06/2024 07:54:48 PM PM
00001011
 1 | bits and 2 | into bits
00000000
 1 | bits or 2 | into bits
00000011
 1 | bits or 1                                                                                                                       06/06/2024 07:55:54 PM PM
1
 2 | bits or 1
3
 14 | bits or 8                                                                                                                      06/06/2024 07:56:27 PM PM
14
 14 | bits or 8 | into bits                                                                                                          06/06/2024 07:56:32 PM PM
00001110

# bits
bits and	Performs bitwise and for ints.
bits not	Performs logical negation on each bit.
bits or	Performs bitwise or for ints.
bits rol	Bitwise rotate left for ints.
bits ror	Bitwise rotate right for ints.
bits shl	Bitwise shift left for ints.
bits shr	Bitwise shift right for ints.
bits xor	Performs bitwise xor for ints.

# group-by
ls | group-by type
open cool.json | group-by foo?
[foo.txt bar.csv baz.txt] | group-by { path parse | get extension }

# parse
cargo search shells --limit 10 | lines | parse "{crate_name} = {version} #{description}" | str trim

# json
open foo.json | get key.i.j
https://www.nushell.sh/cookbook/jq_v_nushell.html#mapping-over-lists

# toml
open foo.toml

# flags
def greet [
  name: string
  --age: int
] {
  [$name $age]
}

# varargs
def greet [...name: string] {
  print "hello all:"
  for $n in $name {
    print $n
  }
}

# transpose
transpose {record|table} --args

# optional parameters
def greet [name?: string] {
  $"hello ($name)"
}

# head
 open initial.bbnet | lines | split column ' ' | where column1 == C225 | transpose | last 225

# ssv -- https://www.nushell.sh/commands/docs/from_ssv.html
from ssv

# filetypes
csv
eml
ics
ini
json
nuon
ods
SQLite
ssv
toml
tsv
url
vcf
xlsx / xls
xml
yaml / yml
