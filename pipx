# description
yet another attempt to mitigate totally braindead python installation process. Creates and manages a venv for every single
thing you install with it. Still better than pip I guess.

# docs
https://pipx.pypa.io/stable/docs/

# install
# nope -- fucking python PEP668 broke this
# nope install
#python3 -m ensurepip
#python3 -m pip install --user pipx

# install
$ brew install pipx
$ spack install pipx

# usage
$ pipx install globus-cli

# see also
uv

# to create python installer
$ pipx run create-python-package

# to run hatch projmgr
$ pipx run hatch

# install script
$ pipx install pycowsay
$ pipx install --python python3.10 pycowsay
$ pipx install --python 3.12 pycowsay
$ pipx install --fetch-missing-python --python 3.12 pycowsay

# install from repo
$ pipx install git+https://github.com/psf/black
$ pipx install git+https://github.com/psf/black.git@branch-name
$ pipx install git+https://github.com/psf/black.git@git-hash
$ pipx install git+ssh://<username>@<private-repo-domain>/<path-to-package.git>
$ pipx install https://github.com/psf/black/archive/18.9b0.zip

# install w opts
$ pipx install black[d]

# preinstall
$ pipx install --preinstall ansible-lint --preinstall mitogen ansible-core

#  misc
$ pipx install 'black[d] @ git+https://github.com/psf/black.git@branch-name'
$ pipx install --suffix @branch-name 'black[d] @ git+https://github.com/psf/black.git@branch-name'
$ pipx install --include-deps jupyter
$ pipx install --pip-args='--pre' poetry
$ pipx install --pip-args='--index-url=<private-repo-host>:<private-repo-port> --trusted-host=<private-repo-host>:<private-repo-port>' private-repo-package
$ pipx install --index-url https://test.pypi.org/simple/ --pip-args='--extra-index-url https://pypi.org/simple/' some-package
$ pipx --global install pycowsay
$ pipx install .
$ pipx install path/to/some-project

# run from repo
$ pipx run cowsay

# to run something
$ pipx run asciinema

# install location
~/.local/share/pipx/venvs  # envs
~/.local/bin # progs
PIPX_HOME
PIPX_GLOBAL_HOME
PIPX_BIN_DIR
PIX_GLOBAL_BIN_DIR

# to add to an env
pipx inject <env> <something>
$ pipx inject ipython matplotlib #

# commands
install             Install a package
install-all         Install all packages
uninject            Uninstall injected packages from an existing VirtualEnvironment
inject              Install packages into an existing Virtual Environment
pin                 Pin the specified package to prevent it from being upgraded
unpin               Unpin the specified package
upgrade             Upgrade a package
upgrade-all         Upgrade all packages. Runs `pip install -U <pkgname>` for each package.
upgrade-shared      Upgrade shared libraries.
uninstall           Uninstall a package
uninstall-all       Uninstall all packages
reinstall           Reinstall a package
reinstall-all       Reinstall all packages
list                List installed packages
interpreter         Interact with interpreters managed by pipx
run                 Download latest version of pkg to temp venv, then run it. Also compatible with local `__pypackages__` dir(experimental).
runpip              Run pip in an existing pipx-managed Virtual Environment
ensurepath          Ensure directories necessary for pipx operation are in your PATH environment variable.
environment         Print a list of environment variables and paths used by pipx.
completions         Print instructions on enabling shell completions for pipx
