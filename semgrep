# description:  semantic code analysis
  Searches TARGET paths for matches to rules or patterns. Defaults to searching entire
  current working directory.

# alternates
sonarqube
codeQL
comby?

# install
brew install semgrep

# docs
https://semgrep.dev/docs/

# pattern syntax
https://semgrep.dev/docs/writing-rules/pattern-syntax/

# rules syntax
https://semgrep.dev/docs/writing-rules/rule-syntax/

# troublehooting
https://semgrep.dev/docs/troubleshooting/rules/

# tutorials
https://semgrep.dev/learn/basics/4

# config
semgrep --config auto

# usage
semgrep scan [OPTIONS] [TARGETS]...
semgrep -e 'pat' file

# quickstart -- To get started quickly, run
semgrep --config auto .

# rule examples - repo
 git clone https://github.com/returntocorp/semgrep-rules.git

# wdl example
semgrep --vim -o /tmp/tasks --verbose --exclude="*.py" -l generic -e 'task $T { ... }' .

# Options:
  --replacement TEXT              autofix expr applied to matches found with --pattern. Only valid with command-line pattern.
Configuration options: [mutually_exclusive]
    -c, -f, --config TEXT         YAML config file, dir of files ending in .yml|.yaml, cfg URL, or Semgrep registry name
    --config auto 		  obtain rules tailored to project; project URL used to login to Semgrep registry.
                                  To run multiple rule files simultaneously, use
                                  --config before every YAML, URL, or Semgrep registry
                                  entry name.  For example `semgrep --config p/python
                                  --config myrules/myrule.yaml`
    -e, --pattern TEXT            Code search pattern. See https://semgrep.dev/docs/writing-rules/pattern-syntax
                                  for information on pattern features.
  -l, --lang TEXT                 Parse pattern and all files in specified language. Must be used with -e/--pattern.
  --dryrun / --no-dryrun          print the changes to console to see changes before commit to them. Only with --autofix flag
  --severity [INFO|WARNING|ERROR] Report findings only from rules matching the supplied severity level [INFO, WARNING, ERROR]
  --show-supported-languages      Print a list of languages that are currently supported by Semgrep.
Alternate modes:                No search is performed in these modes
    --validate                    Validate configuration file(s). This will check YAML
                                  files for errors and run 'p/semgrep-rule-lints' on the YAML files. No search is performed.
Test and debug options:
    --test                        Run test suite.
    --test-ignore-todo / --no-test-ignore-todo
                                  If --test-ignore-todo, ignores rules marked as '#todoruleid:' in test files.
    --dump-ast / --no-dump-ast    If --dump-ast, shows AST of the input file or passed expression and then exit (can use --json).
  --error / --no-error            Exit 1 if there are findings. Useful for CI and scripts.
  --strict / --no-strict          nonzero exit when WARN encountered. Fails early if invalid cfg present. Defaults --no-strict.
  -a, --autofix / --no-autofix    Apply autofix patches. WARNING: data loss can occur with this flag. EXPERIMENTAL
  --baseline-commit TEXT          Only show results that are not found in this commit hash. Aborts if not in a git directory,
                                  there are unstaged changes, or given baseline hash doesn't exist
  --metrics [auto|on|off]         Configure how usage metrics are sent to Semgrep server. If 'auto', metrics are sent whenever the
                                  --config value pulls from the Semgrep server. If 'on',
                                  metrics are always sent. If 'off', metrics are
                                  disabled altogether and not sent. If absent, the
                                  SEMGREP_SEND_METRICS environment variable value will
                                  be used. If no environment variable, defaults to 'auto'.
Path options:                   By default, Semgrep scans all git-tracked files with extensions matching rules' languages.
    --exclude TEXT                Skip any file or directory that matches this pattern;
                                  --exclude='*.py' will ignore the following: foo.py,
                                  src/foo.py, foo.py/bar.sh. --exclude='tests' will
                                  ignore tests/foo.py as well as a/b/tests/c/foo.py. Can
                                  add multiple times. If present, any --include
                                  directives are ignored.
    --exclude-rule TEXT           Skip any rule with the given id. Can add multiple times.
    --include TEXT                Filter files or directories by path. The argument is a
                                  glob-style pattern such as 'foo.*' that must match the
                                  path. This is an extra filter in addition to other
                                  applicable filters. For example, specifying the
                                  language with '-l javascript' migh preselect files
                                  'src/foo.jsx' and 'lib/bar.js'. Specifying one of '--
                                  include=src', '--include=*.jsx', or '--
                                  include=src/foo.*' will restrict the selection to the
                                  single file 'src/foo.jsx'. A choice of multiple '--
                                  include' patterns can be specified. For example, '--
                                  include=foo.* --include=bar.*' will select both
                                  'src/foo.jsx' and 'lib/bar.js'. Glob-style patterns
                                  follow the syntax supported by python, which is
                                  documented at
                                  https://docs.python.org/3/library/glob.html
    --max-target-bytes BYTES      Maximum size for a file to be scanned by Semgrep, e.g
                                  '1.5MB'. Any input program larger than this will be
                                  ignored. A zero or negative value disables this
                                  filter. Defaults to 1000000 bytes.
    --use-git-ignore / --no-git-ignore
                                  Skip files ignored by git. Scanning starts from the
                                  root folder specified on the Semgrep command line.
                                  Normally, if the scanning root is within a git
                                  repository, only the tracked files and the new files
                                  would be scanned. Git submodules and git-ignored files
                                  would normally be skipped. --no-git-ignore will
                                  disable git-aware filtering. Setting this flag does
                                  nothing if the scanning root is not in a git
                                  repository.
    --scan-unknown-extensions / --skip-unknown-extensions
                                  If true, explicit files will be scanned using the
                                  language specified in --lang. If --skip-unknown-
                                  extensions, these files will not be scanned. Defaults
                                  to false.
Performance and memory options:
    --enable-version-check / --disable-version-check
                                  Checks Semgrep servers to see if the latest version is
                                  run; disabling this may reduce exit time after
                                  returning results.
    -j, --jobs INTEGER            Number of subprocesses to use to run checks in
                                  parallel. Defaults to the number of cores on the
                                  system.
    --max-memory INTEGER          Maximum system memory to use running a rule on a
                                  single file in MB. If set to 0 will not have memory
                                  limit. Defaults to 0.
    --optimizations [all|none]    Turn on/off optimizations. Default = 'all'. Use 'none'
                                  to turn all optimizations off.
    --timeout INTEGER             Maximum time to spend running a rule on a single file
                                  in seconds. If set to 0 will not have time limit.
                                  Defaults to 30 s.
    --timeout-threshold INTEGER   Maximum number of rules that can timeout on a file
                                  before the file is skipped. If set to 0 will not have
                                  limit. Defaults to 3.
Display options:
    --enable-nosem / --disable-nosem
                                  --enable-nosem enables 'nosem'. Findings will not be
                                  reported on lines containing a 'nosem' comment at the
                                  end. Enabled by default.
    --force-color / --no-force-color
                                  Always include ANSI color in the output, even if not
                                  writing to a TTY; defaults to using the TTY status
    --max-chars-per-line INTEGER  Maximum number of characters to show per line.
    --max-lines-per-finding INTEGER
                                  Maximum number of lines of code that will be shown for
                                  each match before trimming (set to 0 for unlimited).
    --dataflow-traces             Explain how non-local values reach the location of a
                                  finding (only affects text output).
    -o, --output TEXT             Save search results to a file or post to URL. Default
                                  is to print to stdout.
    --rewrite-rule-ids / --no-rewrite-rule-ids
                                  Rewrite rule ids when they appear in nested sub-
                                  directories (Rule 'foo' in test/rules.yaml will be
                                  renamed 'test.foo').
    --time / --no-time            Include a timing summary with the results. If output
                                  format is json, provides times for each pair (rule,
                                  target).
Verbosity options: [mutually_exclusive]
    -q, --quiet                   Only output findings.
    -v, --verbose                 Show more details about what rules are running, which
                                  files failed to parse, etc.
    --debug                       All of --verbose, but with additional debugging
                                  information.
Output formats: [mutually_exclusive]
                                  Uses ASCII output if no format specified.
    --emacs                       Output results in Emacs single-line format.
    --json                        Output results in Semgrep's JSON format.
    --gitlab-sast                 Output results in GitLab SAST format.
    --gitlab-secrets              Output results in GitLab Secrets format.
    --junit-xml                   Output results in JUnit XML format.
    --sarif                       Output results in SARIF format.
    --vim                         Output results in vim single-line format.


# principles
Equivalences: Match code that means the same thing even though it looks different
Ellipsis (...): Abstracting away or ignoring statements, expressions, or function arguments you don't care about
Metavariables: $X: Matching expr (func calls, args, assignments, etc.) when you don't know what they look like ahead of time

# ex
pattern        |  matching code
---------------+----------------
foo("...")     | foo("whatever sequence of chars")

# pattern            matching code
------------------------------------
$V = get()         user_data = get()
...		           print("do stuff")
eval($V)           foobar()
                   eval(user_data)

# ex
pattern            matching code
------------------------------------
$X = 42;           transaction_id = 42;
                   x = 42;

# ex
pattern                    matching code
------------------------------------------
verify_transaction($X)     verify_transaction(foobar)
...                        make_transaction(foobar)
make_transaction($X)

# autofix
rules:
- id: python.requests.best-practice.use-timeout.use-timeout
  patterns:
  - pattern-not: requests.$W(..., timeout=$N, ...)
  - pattern-not: requests.$W(..., **$KWARGS)
  - pattern-either:
    - pattern: requests.request(...)
    - pattern: requests.get(...)
    - pattern: requests.post(...)
    - pattern: requests.put(...)
    - pattern: requests.delete(...)
    - pattern: requests.head(...)
    - pattern: requests.patch(...)
  fix-regex:
    regex: '(.*)\)'
    replacement: '\1, timeout=30)'
  message: |
    'requests' calls default to waiting until the connection is closed.
    This means a 'requests' call without a timeout will hang the program
    if a response is never received. Consider setting a timeout for all
    'requests'.
  languages: [python]
  severity: WARNING

# generic pattern matching
rules:
  - id: dynamic-proxy-scheme
    pattern: proxy_pass $$SCHEME:// ...;
    paths:
      include:
        - "*.conf"
        - "*.vhost"
        - sites-available/*
        - sites-enabled/*
    languages:
      - generic
    severity: WARNING
    message: >-
      The protocol scheme for this proxy is dynamically determined.
      This can be dangerous if the scheme is injected by an
      attacker because it may forcibly alter the connection scheme.
      Consider hardcoding a scheme for this proxy.
    metadata:
      references:
        - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md
      category: security
      technology:
        - nginx
      confidence: MEDIUM

# generic pattern matching rules
Generic pattern matching has the following properties:
 * A document is interpreted as a nested sequence of ASCII words, ASCII punctuation, and other bytes.
 * ... (ellipsis operator) allows skipping non-matching elements, up to 10 lines down the last match.
 * $X (metavariable) matches any word.
 * $...X (ellipsis metavariable) matches a sequence of words, up to 10 lines down the last match.
 * Indentation determines primary nesting in the document.
 * Common braces introduce secondary nesting only w/in a line => mismatched braces don't disturb structure of rest of document.
 * Indentation: indentation specified in the pattern must be honored in the document.

# named ellipsis -- To match an arbitrary sequence of items and capture their value in the example:
password = $...PASSWORD

# single line matching
generic_ellipsis_max_span: 0  # force ellipsis to match patterns within a single line.

# single line matching rule Example
id: password-in-config-file
pattern: |
  password = $...PASSWORD
options:
  # prevent ellipses from matching multiple lines
  generic_ellipsis_max_span: 0
message: |
  password found in config file: $...PASSWORD
languages:
  - generic
severity: WARNING

# ignore comments --
options.generic_comment_style # ignore C-style comments

# ignore comments example
id: css-blue-is-ugly
pattern: |
  color: blue
options:
  # ignore comments of the form /* ... */
  generic_comment_style: c
message: |
  Blue is ugly.
languages:
  - generic
severity: WARNING



# command line pattern
$ semgrep -l generic -e 'exec(...)` exec.text

# extract mode / mixed language support -- how to extract langA commands used in langB e.g. bash in python os.system()
rules:
  - id: extract-docker-run-to-bash
    mode: extract
    languages:
      - dockerfile
    pattern: RUN $...CMD
    extract: $...CMD
    dest-language: bash
  - id: extract-python-os-system-to-bash
    mode: extract
    languages:
      - python
    pattern: os.system("$CMD")
    extract: $CMD
    dest-language: bash
